{"version":3,"file":"main.9d04e3a4871302fe47b2.bundle.js","sources":["webpack:///./dg/components/atoms/input/common.js"],"sourcesContent":["class commonInput {\n\tconstructor(el) {\n\t\tthis.el = el\n\t}\n\n\tempty() {\n\t\twhile (this.el.firstChild) {\n\t\t\tthis.el.removeChild(this.el.firstChild);\n\t\t}\n\t}\n\n\t// generate or get an ID + NAME and coordinates both\n\t// if the developer has defined a value for each, respect that\n\tgetOrSetId() {\n\t\t//debugger\n\t\tlet id = this.el.field.getAttribute('id')\n\t\tlet name = this.el.field.getAttribute('name')\n\t\t// generate if none of both\n\t\tif (!id && !name)\n\t\t\tname = id = this.el.type + '_' + Math.round(Math.random() * 1000000000)\n\t\t// sync id and name\n\t\tif (!id && name)\n\t\t\tid = name\n\t\tif (!name && id)\n\t\t\tname = id\n\n\t\tthis.el.field.setAttribute('id', id)\n\t\tthis.el.field.setAttribute('name', name)\n\t}\n\n\t// inserts a label with text coming from +label attribute\n\t// @return the label as an element\n\tsetupLabel() {\n\t\tthis.labelText = this.el.getAttribute('+label')\n\t\tif (!this.labelText)\n\t\t\tthis.labelText = 'Default Label'\n\t\t// return `<label for=\"${this.el.field.getAttribute('id')}\">${this.labelText}</label>`\n\t\tlet labelEl = document.createElement('label')\n\t\tlabelEl.setAttribute('for', this.el.field.getAttribute('id'))\n\t\tlabelEl.innerText = this.labelText\n\t\treturn labelEl\n\t}\n\n\t// @return {null|HTMLElement}\n\tgetError() {\n\t\tlet errorMessage = this.el.getAttribute('+error') || 'Error message'\n\t\tif (!this.el.hasAttribute('+invalid'))\n\t\t\treturn null\n\n\t\tlet errorEl = document.createElement('span')\n\t\terrorEl.innerText = errorMessage\n\t\terrorEl.setAttribute('role', 'alert')\n\t\terrorEl.setAttribute('id', this.generateErrorFieldId())\n\t\terrorEl.classList.add('error')\n\t\treturn errorEl\n\t}\n\n\tgenerateErrorFieldId() {\n\t\treturn this.el.field.getAttribute('id') + '_error'\n\t}\n\n\t// generates more markup around the field, in order to style them properly\n\tprepareFieldForIcon() {\n\t\t// 0 prepare our container\n\t\tlet el = document.createElement('div')\n\t\tel.classList.add('with-icon')\n\t\t// 1 insert next to the field\n\t\tthis.el.field.insertAdjacentElement('beforebegin', el)\n\t\t// 2 move the field into it\n\t\tel.appendChild(this.el.field)\n\t}\n}\n\nexport default commonInput"],"mappings":"AAyEA","sourceRoot":""}