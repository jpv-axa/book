// BASED FROM https://github.com/axa-ch/patterns-library/blob/develop-v2/src/components/00-materials/20-typography-and-text.scss
// in the develop-v2 branch


// =====================
// Font, line-heights and sizes generation
// =====================

// Real font name
$font-family-sans-serif: 'Source Sans Pro';
$font-family-serif: 'Publico Headline';

// fallbacks and alias
$long-texts: $font-family-sans-serif,
sans-serif;
$titles: $font-family-serif,
serif;

// get the @font-face declarations AFTER the variables names
@import './fonts.scss';

/*
define in this order : font-size (in em, for 16px base),  line-height, letter-spacing
*/
$text-sizes: (default: (1rem, 1.375rem, 0),
    legals: (0.72, 1.5, 0),
    text-catchy: (0.78, 1.7, 1px),
    text-secondary: (0.89, 1.5, 0),
    text: (1, 1.5, 0), // for normal text, Accessibility recomandation is @ 1.5
    label: (1.11, 1.4, 0),
    quote: (1.11, 1.4, 0),
    h6: (1.33, 1.4, 0),
    h5: (1.56, 1.3, 0),
    h4: (2, 1.25, 0),
    h3: (2.4, 1.2, 0),
    h2: (2.8, 1.2, 0),
    h1: (3.4, 1.2, 0));


$font-values: (default: (400, normal),
    regular: (400, normal),
    normal: (400, normal),
    semibold: (600, normal),
    bold: (700, normal));

// Don't use this in components, use typo()
@mixin _font($font: text, $name: default) {
    @if map-has-key($font-values, $name) {
        font-weight: nth(map-get($font-values, $name), 1);
        font-style: nth(map-get($font-values, $name), 2);
    }

    @if $font==title {
        font-family: $titles;
    }

    @else {
        font-family: $long-texts;
    }
}


@import './grids.scss';

// Don't use this in components, use typo()
@mixin _text($name: default) {
    @if (map-has-key($text-sizes, $name)) {

        // "mobile + tablet : act as REM = 16 px
        @media (max-width: ($breakpoint-M - 1)) {
            font-size: (nth(map-get($text-sizes, $name), 1)) * 1rem;
        }

        // desktop : act as REM = 18 px
        @media (min-width: $breakpoint-M) {
            font-size: (nth(map-get($text-sizes, $name), 1)) * 18 / 16 * 1rem;
        }

        line-height: nth(map-get($text-sizes, $name), 2);
        letter-spacing: nth(map-get($text-sizes, $name), 3);
    }

    @else {

        // "mobile + tablet : act as REM = 16 px
        @media (max-width: ($breakpoint-S - 1)) {
            font-size: nth(map-get($text-sizes, default), 1);
        }

        // desktop : act as REM = 18 px
        @media (min-width: $breakpoint-M) {
            font-size: nth(map-get($text-sizes, default), 1);
        }

        line-height: nth(map-get($text-sizes, default), 2);
        letter-spacing: nth(map-get($text-sizes, default), 3);
    }

}

@mixin typo($name: primary, $text: default, $style: default) {
    @include _font($name, $style);
    @include _text($text);
    margin: 0;

}